package com.wztlei.tanktrouble;

import android.app.Activity;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;
import android.support.annotation.NonNull;
import android.util.DisplayMetrics;
import android.util.Log;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import org.jetbrains.annotations.Contract;

import java.util.Random;

public class UserUtils {
    private static DatabaseReference sDatabase;
    private static SharedPreferences sSharedPref;
    private static String[] sAdjectiveList, sNounList;
    private static String sUsername, sUserId;
    private static int sScreenWidth, sScreenHeight;
    private static float sScreenScale;

    private static final String USERS_KEY = Constants.USERS_KEY;
    private static final String USER_ID_KEY = Constants.USER_ID_KEY;
    private static final String USERNAME_KEY = Constants.USERNAME_KEY;
    private static final String TAG = "WL/UserUtils";

    public static void initialize(Activity activity) {
        Log.d(TAG, "initialize UserUtils");

        // Get the lists of words to create random usernames
        sAdjectiveList = activity.getResources().getStringArray(R.array.adjective_list);
        sNounList = activity.getResources().getStringArray(R.array.noun_list);

        // Get the stored user ID and username in shared preferences
        sSharedPref = PreferenceManager.getDefaultSharedPreferences(activity);
        sUserId = sSharedPref.getString(USER_ID_KEY, "");
        sUsername = sSharedPref.getString(USERNAME_KEY, "");

        // Get a reference to the database
        sDatabase = FirebaseDatabase.getInstance().getReference();

        // Set the username data in various locations
        setUsername(sUsername);
        setScreenSize(activity);
    }

    /**
     * Sets the screen height and width in pixels, accounting for the status bar height.
     *
     * @param activity the activity from which the method is called
     */
    private static void setScreenSize(Activity activity) {
        DisplayMetrics metrics = new DisplayMetrics();
        activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);

        int statusBarHeight = 0;
        int resourceId = activity.getResources().getIdentifier
                ("status_bar_height", "dimen", "android");
        if (resourceId > 0) {
            statusBarHeight = activity.getResources().getDimensionPixelSize(resourceId);
        }

        sScreenWidth = metrics.widthPixels;
        sScreenHeight = metrics.heightPixels - statusBarHeight;
        sScreenScale = sScreenWidth / 1080f;
    }

    /**
     * Returns the actual graphics dimension that is scaled by the user's screen width.
     *
     * @param scale the ratio of a graphics dimension to the screen width
     * @return      the scaled value
     */
    public static float scaleGraphicsFloat(float scale) {
        return scale*sScreenWidth;
    }

    /**
     * Returns the actual graphics dimension that is scaled by the user's screen width.
     *
     * @param scale the ratio of a graphics dimension to the screen width
     * @return      the scaled value
     */
    public static int scaleGraphicsInt(float scale) {
        return Math.round(scale*sScreenWidth);
    }


    /**
     * Sets a new username and calls the appropriate function depending on whether this is the
     * first time a username has been set.
     *
     * @param newUsername the new username to be and stored
     */
    public static void setUsername(String newUsername){
        if (sUserId.length() == 0 || sUsername.length() == 0) {
            String randomUsername = generateRandomUsername();
            setFirstUsername(randomUsername);
        } else {
            updateUsername(newUsername);
        }
    }

    /**
     * Called when no username has been previously set so a new username is needed.
     * This function sets a new username in Firebase, shared preferences, and the field of this
     * class. This function stores the user ID auto-generated by Firebase as well.
     *
     * @param firstUsername the very first username of the user
     */
    private static void setFirstUsername(final String firstUsername) {
        final DatabaseReference mUserDataRef = sDatabase.child(USERS_KEY).push();

        mUserDataRef.child(USERNAME_KEY)
                .setValue(firstUsername)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        sUserId = mUserDataRef.getKey();
                        sUsername = firstUsername;
                        putStringInPrefs(USER_ID_KEY, sUserId);
                        putStringInPrefs(USERNAME_KEY, firstUsername);
                        Log.d(TAG, "added new user with sUserId=" + sUserId
                                + " and sUsername=" + sUsername);
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.w(TAG, "Failed to add user in updateUsername");
                    }
                });
    }

    /**
     * Updates the username data with a new username in Firebase, shared preferences, and
     * the field of this class.
     *
     * @param newUsername the new username
     */
    private static void updateUsername(final String newUsername) {
        sDatabase.child(USERS_KEY)
                .child(sUserId)
                .child(USERNAME_KEY)
                .setValue(newUsername)
                .addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        sUsername = newUsername;
                        putStringInPrefs(USERNAME_KEY, newUsername);
                        Log.d(TAG, "updated new username for sUserId=" + sUserId
                                + " with sUsername=" + sUsername);
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.w(TAG, "Failed to update username in updateUsername");
                    }
                });
    }

    /**
     * Concatenates two random adjectives from sAdjectiveList and one random noun
     * from sNounList to produce a random username.
     *
     * @return  a string storing the randomly generated username
     */
    @NonNull
    public static String generateRandomUsername() {

        Random random = new Random();

        // Get two adjectives and one noun
        String adjective1 = sAdjectiveList[random.nextInt(sAdjectiveList.length)];
        String adjective2 = sAdjectiveList[random.nextInt(sAdjectiveList.length)];
        String noun = sNounList[random.nextInt(sNounList.length)];

        // Capitalize each word with the rest of the string being lowercase characters
        adjective1 = adjective1.substring(0, 1).toUpperCase()
                + adjective1.substring(1).toLowerCase();
        adjective2 = adjective2.substring(0, 1).toUpperCase()
                + adjective2.substring(1).toLowerCase();
        noun = noun.substring(0, 1).toUpperCase()
                + noun.substring(1).toLowerCase();

        return adjective1 + adjective2 + noun;
    }

    /**
     * Puts a string in the SharedPreferences object which is a key-value pair system.
     *
     * @param key   the key used to determine where the string is to be stored
     * @param value the actual string being stored in SharedPreferences
     */
    private static void putStringInPrefs (String key, String value) {
        SharedPreferences.Editor sSharedPrefEditor = sSharedPref.edit();
        sSharedPrefEditor.putString(key, value);
        sSharedPrefEditor.apply();
    }

    /**
     * Generates a random number on the closed interval [min, max].
     *
     * @param min   the minimum number that can be generated
     * @param max   the maximum number that can be generated
     * @return      the random number between min and max
     */
    public static int randomInt (int min, int max){
        Random random = new Random();
        return random.nextInt(max-min+1) + min;
    }

    @Contract(pure = true)
    public static String getUsername() { return sUsername; }

    @Contract(pure = true)
    public static String getUserId() { return sUserId; }

    @Contract(pure = true)
    public static int getScreenWidth() { return sScreenWidth; }

    @Contract(pure = true)
    public static int getScreenHeight() { return sScreenHeight; }

    @Contract(pure = true)
    public static float getScreenScale() { return sScreenScale; }



}
