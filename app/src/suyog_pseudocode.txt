// Pseudocode algorithm for helper function
def list_of_all_visitable (square, visited_so_far)
	visited_so_far.add(square)
	
	// a square has 4 possible neighbours - square.up, square.down, square.left, and square.right
	
	// Try going up if we have not visited there before
	if can_go_up(square) and (square.up is not in visited_so_far):
		visited_so_far.add( list_of_all_visitable(square.up) )
		
	// Try going down if we have not visited there before
	if can_go_down(square) and (square.down is not in visited_so_far):
		visited_so_far.add( list_of_all_visitable(square.down) )
	
	// Try going left if we have not visited there before
	if can_go_left(square) and (square.left is not in visited_so_far):
		visited_so_far.add( list_of_all_visitable(square.left) )
	
	// Try going right if we have not visited there before
	if can_go_right(square) and (square.right is not in visited_so_far):
		visited_so_far.add( list_of_all_visitable(square.right) )
	
	return visited_so_far

	
// call main function
def is_valid_map (map):
	// Return true if the number of visitable squares is the number of total squares
	if (list_of_all_visitable (map.any_square, empty_list) == map.size()):
		return true
	else
		return false
	
	
	
	
	
	